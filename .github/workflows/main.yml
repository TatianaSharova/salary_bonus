name: Salary Bonus Workflow

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/salary_bonus:latest
  # creds:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Give execution rights for the decrypt script
  #       run: chmod +x ./decrypt_creds.sh

  #     - name: Decrypt creds.json
  #       run: ./decrypt_creds.sh
  #       env:
  #         CREDS_JSON: ${{ secrets.CREDS_JSON }}
  #     # This command is just an example to show your secret being printed
  #     # Ensure you remove any print statements of your secrets. GitHub does
  #     # not hide secrets that use this workaround.
  #     - name: Test printing your secret (Remove this step in production)
  #       run: cat $HOME/secrets/creds.json


  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Give execution rights for the decrypt script
      run: chmod +x ./decrypt_creds.sh

    - name: Decrypt creds.json
      run: ./decrypt_creds.sh
      env:
        CREDS_JSON: ${{ secrets.CREDS_JSON }}
    
    - name: copy file via ssh password
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "./secrets/creds.json"
        target: "/home/${{ secrets.USER }}/"
        tar_dereference: true
        rm: true
    
    # - name: Debug SSH connection
    #   run: |
    #     ssh -vvv ${{ secrets.USER }}@${{ secrets.HOST }}
    #   shell: bash
    
    # - name: Copy creds.json to remote server
    #   run: |
    #     scp $HOME/secrets/creds.json ${{ secrets.USER }}@${{ secrets.HOST }}:/home/${{ secrets.USER }}/
    #   env:
    #     SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}

    - name: Checkout repo
      uses: actions/checkout@v3
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script_stop: true
        script: |
          sudo echo "${{ secrets.ENV }}" > .env
          sudo sed -i '/DRONE_SSH_PREV_COMMAND_EXIT_CODE/d' .env

          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/salary_bonus:latest
          if [ "$(sudo docker ps -aq -f name=your_python_container)" ]; then
            sudo docker stop salary_container
            sudo docker rm salary_container
          fi

          sudo docker run -d --name salary_container ${{ secrets.DOCKER_USERNAME }}/salary_bonus:latest
          sudo docker cp creds.json salary_container:/app/creds.json
          sudo docker cp .env salary_container:/app/.env

          sudo docker image rm $(sudo docker image ls -f "dangling=true" -q)

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой salary bonus успешно выполнен!